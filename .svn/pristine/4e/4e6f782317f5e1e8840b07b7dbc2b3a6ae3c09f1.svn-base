<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c"      uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="form"   uri="http://www.springframework.org/tags/form" %>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<div style="top: 100px;" class="auth-page-content">
	<div class="col-lg-12">
		<div class="card">
			<div class="card-header">
				<h4 class="card-title mb-0">쪽지함</h4>
			</div><!-- end card header -->
			<div class="card-body">
				<!-- Tab Navigation -->
				<ul class="nav nav-pills nav-tabs mb-3" role="tablist">
                    <li class="nav-item waves-effect waves-light" role="presentation">
                        <a class="nav-link active" data-bs-toggle="tab" href="#received" role="tab" aria-selected="true">
                            받은 쪽지 목록
                        </a>
                    </li>
                    <li class="nav-item waves-effect waves-light" role="presentation">
                        <a class="nav-link" data-bs-toggle="tab" href="#sent" role="tab" aria-selected="false" tabindex="-1">
                            보낸 쪽지 목록
                        </a>
                    </li>
                </ul>
				<div class="tab-content" id="myTabContent">
					<!-- Received Messages Tab -->
					<div class="tab-pane fade show active" id="received" role="tabpanel" aria-labelledby="received-tab">
						<div class="listjs-table" id="receivedList">
							<div class="row g-4 mb-3">
								<div class="col-sm-auto">
									<div>
										<button class="btn btn-soft-danger" onclick="deleteMultiple()"><i class="ri-delete-bin-2-line"></i></button>
									</div>
								</div>
								<div class="col-sm">
									<div class="d-flex justify-content-sm-end">
										<div class="search-box ms-2">
											<input type="text" class="form-control search" placeholder="발신자 ID" id="sender" name="sender">
											<i class="ri-search-line search-icon"></i>
										</div>
									</div>
								</div>
							</div>

							<div class="table-responsive table-card mt-3 mb-1">
								<table class="table align-middle table-nowrap" id="receivedTable">
									<thead class="table-light">
										<tr>
											<th scope="col" style="width: 50px;">
												<div class="form-check">
													<input class="form-check-input" type="checkbox" id="checkAllReceived" value="option">
												</div>
											</th>
											<th style="width: 200px;">보낸사람</th>
											<th style="width: 250px;">제목</th>
											<th>내용</th>
											<th class="sort" data-sort="date" style="width: 250px; text-align: center;">전송 날짜</th>
										</tr>
									</thead>
									<tbody class="receivelist form-check-all">
										
									</tbody>
								</table>
							</div>
							<div class="gridjs-footer">
								<div class="gridjs-pagination">
									<nav aria-label="Page navigation example">
										<ul class="pagination justify-content-center" id="pagenationReceiveMsg">
					
										</ul>
									</nav>
								</div>
							</div>
						</div>
					</div>
					<!-- Sent Messages Tab -->
					<div class="tab-pane fade" id="sent" role="tabpanel" aria-labelledby="sent-tab">
						<div class="listjs-table" id="sentList">
							<div class="row g-4 mb-3">
								<div class="col-sm-auto">
									<div>
										<button class="btn btn-soft-danger" onclick="deleteMultiple()"><i class="ri-delete-bin-2-line"></i></button>
									</div>
								</div>
								<div class="col-sm">
									<div class="d-flex justify-content-sm-end">
										<div class="search-box ms-2">
											<input type="text" class="form-control search" placeholder="수신자 ID" id="receiver" name="receiver">
											<i class="ri-search-line search-icon"></i>
										</div>
									</div>
								</div>
							</div>

							<div class="table-responsive table-card mt-3 mb-1">
								<table class="table align-middle table-nowrap" id="sentTable">
									<thead class="table-light">
										<tr>
											<th scope="col" style="width: 50px;">
												<div class="form-check">
													<input class="form-check-input" type="checkbox" id="checkAllSent" value="option">
												</div>
											</th>
											<th style="width: 200px;">받는사람</th>
											<th style="width: 250px;">제목</th>
											<th>내용</th>
											<th class="sort" data-sort="date" style="width: 250px; text-align: center;">전송 날짜</th>
											<th class="sort" data-sort="date" style="width: 50px; text-align: center;">상태</th>
										</tr>
									</thead>
									<tbody class="sendlist form-check-all">
						
									</tbody>
								</table>
							</div>
							<div class="gridjs-footer">
								<div class="gridjs-pagination">
									<nav aria-label="Page navigation example">
										<ul class="pagination justify-content-center" id="pagenationSendMsg">
					
										</ul>
									</nav>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div><!-- end card -->
		</div>
		<!-- end col -->
	</div>
</div>

<script>
	const csrfHeader = "${_csrf.headerName}";
	const csrfToken = "${_csrf.token}";
	const itemsPerPage = 10; 
	let receivePage = 1; // 받은 쪽지함 현재 페이지
	let sendPage = 1; // 보낸 쪽지함 현재 페이지

	let totalReceiveMsg = 0; // 받은 쪽지함 총 개수
	let totalSendMsg = 0; // 보낸 쪽지함 총 개수

	let totalReceiveMsgPages = 0; // 받은 쪽지함 전체 페이지
	let totalSendMsgPages = 0; // 보낸 쪽지함 전체 페이지

	let startReceiveMsgPage = 1; // 받은 쪽지함 시작페이지
	let startSendMsgPage = 1; // 보낸 쪽지함 시작 페이지

	let receiver = ""; // 받는 놈
	let sender = ""; // 보낸 놈

	let receiveUrl = "/receiveList";
	let sendUrl = "/sendList";
	
	receiveCount();
	receiveMsgList(receiveUrl, receivePage);
	
	sendCount();
	sendMsgList(sendUrl, sendPage);

	// 받은거 카운트
	function receiveCount(){
		$.ajax({
			url: "/receiveCount",
			type: 'GET',
			data:{
				"sender": sender
			},
			dataType: "json",
			contentType: "application/json;charset=utf-8",
			beforeSend: function (xhr) {
				xhr.setRequestHeader(csrfHeader, csrfToken);
			},
			success: function(data){
				$.each(data, function(cnt){
					totalReceiveMsg = data.cnt;
					totalReceiveMsgPages = Math.ceil(totalReceiveMsg / itemsPerPage);
					receiveMsgPaging();
					bindReceivePagingHandler();
					receiveMsgList(receiveUrl, receivePage);
				});
			},
			error: function(error){
				console.log(error,"다시 짜~");
			}
		});
	}
	
	// 보낸거 카운트
	function sendCount(){
		$.ajax({
			url: "/sendCount",
			type: 'GET',
			data:{
				"receiver": receiver
			},
			dataType: "json",
			contentType: "application/json;charset=utf-8",
			beforeSend: function (xhr) {
				xhr.setRequestHeader(csrfHeader, csrfToken);
			},
			success: function(data){
				$.each(data, function(cnt){
					totalSendMsg = data.cnt;
					totalSendMsgPages = Math.ceil(totalSendMsg / itemsPerPage);
					sendMsgPaging();
					bindSendPagingHandler();
					sendMsgList(sendUrl, sendPage);;
				});
			},
			error: function(error){
				console.log(error,"다시 짜~");
			}
		});
	}

	//받은거
	function receiveMsgList(url, page){
		$.ajax({
			url: url,
			type: 'GET',
			data: {
				"receivePage": page,
				"sender": sender
			},
			dataType: "json",
			contentType: "application/json;charset=utf-8",
			beforeSend: function (xhr) {
				xhr.setRequestHeader(csrfHeader, csrfToken);
			},
			success: function(data){
				let tbody = $('.receivelist')
				console.log(data)
				tbody.empty();
				$.each(data, function(index, messageVO){
					let sendDate = new Date(messageVO.sendDt);
					let regSendDt =  sendDate.getFullYear()+'/'+ ('0' + (sendDate.getMonth() + 1)).slice(-2) + '/' + ('0' + sendDate.getDate()).slice(-2) + ' ' + ('0' + sendDate.getHours()).slice(-2) + ':' + ('0' + sendDate.getMinutes()).slice(-2) + ':' + ('0' + sendDate.getSeconds()).slice(-2);
					
					let tr = $('<tr>');
						tr.append('<th scope="row"><div class="form-check"><input class="form-check-input" type="checkbox" name="chk_msgNo" value="' + messageVO.msgSeq + '"></div></th>');
						tr.append('<td class="msgSeq" style="display:none;"><a href="javascript:void(0);" class="fw-medium link-primary">#' + messageVO.msgSeq + '</a></td>');
						tr.append('<td class="sender">' + messageVO.sender + '</td>');
						tr.append('<td class="title"><a href="#" class="link-primary link-offset-2 text-decoration-underline link-underline-opacity-25 link-underline-opacity-100-hover">' + messageVO.title + '</a></td>');
						tr.append('<td class="content">' + messageVO.content + '</td>');
						tr.append('<td class="sendDt" style = "text-align : center">' + regSendDt + '</td>');
						tbody.append(tr);
				})
			}
		});
	}
	

	//보낸거
	function sendMsgList(url, page){
		$.ajax({
			url: url,
			type: 'GET',
			data: {
				"sendPage": page,
				"receiver": receiver
			},
			dataType: "json",
			contentType: "application/json;charset=utf-8",
			beforeSend: function (xhr) {
				xhr.setRequestHeader(csrfHeader, csrfToken);
			},
			success: function(data){
				let tbody = $('.sendlist')
				console.log(data)
				tbody.empty();
				$.each(data, function(index, messageVO){
					let sendDate = new Date(messageVO.sendDt);
					let regSendDt =  sendDate.getFullYear()+'/'+ ('0' + (sendDate.getMonth() + 1)).slice(-2) + '/' + ('0' + sendDate.getDate()).slice(-2) + ' ' + ('0' + sendDate.getHours()).slice(-2) + ':' + ('0' + sendDate.getMinutes()).slice(-2) + ':' + ('0' + sendDate.getSeconds()).slice(-2);				
					let tr = $('<tr>');
						tr.append('<th scope="row"><div class="form-check"><input class="form-check-input" type="checkbox" name="chk_msgNo" value="' + messageVO.msgSeq + '"></div></th>');
						tr.append('<td class="msgSeq" style="display:none;"><a href="javascript:void(0);" class="fw-medium link-primary">#' + messageVO.msgSeq + '</a></td>');
						tr.append('<td class="receiver">' + messageVO.receiver + '</td>');
						tr.append('<td class="title"><a href="#" class="link-primary link-offset-2 text-decoration-underline link-underline-opacity-25 link-underline-opacity-100-hover">' + messageVO.title + '</a></td>');
						tr.append('<td class="content">' + messageVO.content + '</td>');
						tr.append('<td class="sendDt" style = "text-align : center">' + regSendDt + '</td>');
						tr.append('<td class="status">' + (messageVO.readYn === 'N' ? '<span class="badge bg-success-subtle text-danger text-uppercase">안읽음</span>' : '<span class="badge bg-success-subtle text-success text-uppercase">읽음</span>') + '</td>');
						tbody.append(tr);
				})
			}
		});
	}

	// 

	/* 날짜 오름차순 내림차순 */
	let ascending = true;

	$('th[data-sort="date"]').click(function(){
		
		ascending = !ascending;
		
		if (ascending) {
            $(this).html('전송 날짜 <i class="bi bi-arrow-up"></i>');
        } else {
            $(this).html('전송 날짜 <i class="bi bi-arrow-down"></i>');
        }

		// 클릭된 열의 데이터-sort 속성 값을 가져옴
		let sortBy = $(this).attr('data-sort');
	});



	/* 누구한테 뭐 받았더라... */	
	$('#receiver').focusout('input',function(){
		receiver = $('#receiver').val().trim();
		receivePage = 1;
		startReceiveMsgPage = 1;
		receiveCount();
	})


	/* 누구한테 뭐 보냈더라... */	
	$('#sender').focusout('input',function(){
		sender = $('#sender').val().trim();
		sendPage = 1;
		startSendMsgPage = 1;
		sendCount();
	})


	/* 페이징 */
	function receiveMsgPaging(){
		let rmp = $('#pagenationReceiveMsg');
		rmp.empty();

		if (receivePage != 1) {
			rmp.append('<li class="page-item"><a class="page-link" id="prevPage" type="button">Prev</a></li>');
		}
		else {
			rmp.append('<li class="page-item disabled"><a class="page-link" id="prevPage">Prev</a></li>');
		}

		let endReceiveMsgPage = Math.min(startReceiveMsgPage + 4, totalReceiveMsgPages);

		for (let i = startReceiveMsgPage; i <= endReceiveMsgPage; i++) {
			rmp.append('<li class="page-item ' + (i === receivePage ? 'active' : '') + '"><a class="page-link" id="btn' + i + '" type="button">' + i + '</a></li>');
		}

		if (receivePage != totalReceiveMsgPages) {
			rmp.append('<li class="page-item"><a class="page-link" id="nextPage" type="button">Next</a></li>');
		} else {
			rmp.append('<li class="page-item disabled"><a class="page-link" id="nextPage">Next</a></li>');
		}

		// 페이지 버튼 클릭 이벤트 설정
		rmp.off('click', '.page-link').on('click', '.page-link', function (event) {
			event.preventDefault();
			const pageText = $(this).text().trim();

			if (!isNaN(pageText)) {
				receivePage = parseInt(pageText);
				receiveMsgList(receivePage);
				receiveMsgPaging();
			}
		});

		// 이전 페이지 클릭 이벤트
		$('#prevPage').click(function () {
			startReceiveMsgPage = Math.max(startReceiveMsgPage - 5, 1);
			receivePage = startReceiveMsgPage;
			receiveMsgList(receivePage);
			receiveMsgPaging();
		});

		// 다음 페이지 클릭 이벤트
		$('#nextPage').click(function () {
			startReceiveMsgPage = startReceiveMsgPage + 5;
			receivePage = startReceiveMsgPage;
			receiveMsgList(receivePage);
			receiveMsgPaging();
		});
	}

	function sendMsgPaging(){
		let smp = $('#pagenationSendMsg');
		smp.empty();

		if (sendPage != 1) {
			smp.append('<li class="page-item"><a class="page-link" id="prevPage" type="button">Prev</a></li>');
		}
		else {
			smp.append('<li class="page-item disabled"><a class="page-link" id="prevPage">Prev</a></li>');
		}

		let endSendMsgPage = Math.min(startSendMsgPage + 4, totalSendMsgPages);

		for (let i = startSendMsgPage; i <= totalSendMsgPages; i++) {
			smp.append('<li class="page-item ' + (i === sendPage ? 'active' : '') + '"><a class="page-link" id="btn' + i + '" type="button">' + i + '</a></li>');
		}

		if (sendPage != totalSendMsgPages) {
			smp.append('<li class="page-item"><a class="page-link" id="nextPage" type="button">Next</a></li>');
		} else {
			smp.append('<li class="page-item disabled"><a class="page-link" id="nextPage">Next</a></li>');
		}

		// 페이지 버튼 클릭 이벤트 설정
		smp.off('click', '.page-link').on('click', '.page-link', function (event) {
			event.preventDefault();
			const pageText = $(this).text().trim();

			if (!isNaN(pageText)) {
				sendPage = parseInt(pageText);
				sendMsgList(sendPage);
				sendMsgPaging();
			}
		});

		// 이전 페이지 클릭 이벤트
		$('#prevPage').click(function () {
			startSendMsgPage = Math.max(startSendMsgPage - 5, 1);
			sendPage = startSendMsgPage;
			sendMsgList(sendPage);
			sendMsgPaging();
		});

		// 다음 페이지 클릭 이벤트
		$('#nextPage').click(function () {
			startSendMsgPage = sendPage + 5;
			sendPage = startSendMsgPage;
			sendMsgList(sendPage);
			sendMsgPaging();
		});
	}

	function bindReceivePagingHandler(){
		$('#pagenationReceiveMsg').on('click', '.page-link', function (event) {
			event.preventDefault();
			const pageText = $(this).text().trim();

			if (!isNaN(pageText)) {
				receivePage = parseInt(pageText);
				receiveMsgList(receivePage);
				receiveMsgPaging();
			}
		});
	}

	function bindSendPagingHandler(){
		$('#pagenationSendMsg').on('click', '.page-link', function (event) {
			event.preventDefault();
			const pageText = $(this).text().trim();

			if (!isNaN(pageText)) {
				sendPage = parseInt(pageText);
				sendMsgList(sendPage);
				sendMsgPaging();
			}
		});
	}

</script>