package com.homecat.sweethome.controller.vote;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.homecat.sweethome.service.vote.VoteService;
import com.homecat.sweethome.unit.ArticlePage;
import com.homecat.sweethome.vo.survey.SurveyVO;
import com.homecat.sweethome.vo.vote.VoteVO;

import lombok.extern.slf4j.Slf4j;

@RequestMapping("/vote")
@Slf4j
@Controller
public class VoteController {
	
	@Autowired
	VoteService voteService;
	
	//투표 입력 페이지
	@GetMapping("/create")
	public String createVote(Model model) {
		log.info("투표 제작 페이지이다");
		model.addAttribute("voteVO", new VoteVO());
		
		return "resident/vote/create";
	}
	
	//투표 입력 실행(관리자)
	@PostMapping("/createPost")
	public String createPost(@ModelAttribute VoteVO voteVO) {
		log.info("투표 정보 : " + voteVO);

		//DB에 보내주자
		int result = voteService.createPost(voteVO);
		log.info("createPost->result : " + result);
		
		return "redirect:/resident/vote/list";
	
	}
	
	//목록 가져오기
	@GetMapping("/list")
	public String surveyList(Model model,
			@RequestParam(value= "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword
			) {
		log.info("설문 목록이 나오는 곳");
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("keyword", keyword);
		map.put("currentPage", currentPage);
		
		//설문 목록 가져오기 로직
		List<VoteVO> voteVOList = this.voteService.getList(map);
		log.info("투표 목록 : " + voteVOList);
		
		
		int total = this.voteService.getTotal(map);
		log.info("설문 총 갯수 : " + total);
		
		
		model.addAttribute("articlePage", new ArticlePage<VoteVO>(total, currentPage, 10, voteVOList, keyword));
		model.addAttribute("voteVOList", voteVOList);
		
		return "resident/vote/list";
	}
	
	@ResponseBody
	@PostMapping("/listAjax")
	public ArticlePage<VoteVO> listAjax(@RequestBody Map<String, Object> map){
	    
        int total = this.voteService.getTotal(map);

        List<VoteVO> voteVOList = this.voteService.getList(map);

        return new ArticlePage<VoteVO>(total, Integer.parseInt(map.get("currentPage").toString()), 10, voteVOList, map.get("keyword").toString());
	} 
	
	//투표 마감처리(관리자)
	@PostMapping("/closeVote")
	@ResponseBody
	public String closeVote(@RequestBody String[] voteCodes) {
		log.info("설문 마감처리");
		
		int result = 0;
		for(String voteCode : voteCodes) {
			// 투표 마감 상태로 업데이트
			result = voteService.closeVote(voteCode);
		}
		
		if (result > 0) {
		    return "Success";
		} else {
		    return "fail";
		}		
	}
	
//	public String detail
}
